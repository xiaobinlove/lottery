{"version":3,"sources":["js/rem.js","view/introduction/index.tsx","view/lottery/index.tsx","view/receveive-award/index.tsx","router/index.tsx","serviceWorker.ts","index.js"],"names":["baseSize","setRem","scale","document","documentElement","clientWidth","style","fontSize","Math","min","window","onresize","Introduction","className","Lottery","React","Component","ReceiveAward","useState","count","IndexRouter","path","exact","component","Boolean","location","hostname","match","FastClick","attach","body","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qFAAA,IAAMA,EAAW,GAEjB,SAASC,IAEP,IAAMC,EAAQC,SAASC,gBAAgBC,YAAc,IAErDF,SAASC,gBAAgBE,MAAMC,SAAYP,EAAWQ,KAAKC,IAAIP,EAAO,GAAM,KAG9ED,IAEAS,OAAOC,SAAW,WAChBV,M,6JCEaW,G,MAZM,WACnB,OACE,yBAAKC,UAAW,QAAhB,kB,yBCQWC,E,iLARX,OACE,4CAEE,gD,GALcC,IAAMC,W,QCabC,MAXf,WAAyB,IAAD,EACIC,mBAAS,GADb,mBACfC,EADe,KAEtB,OAFsB,KAGpB,6BACGA,ICWQC,E,iLAXX,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAM,IAAKC,OAAK,EAACC,UAAWX,IACnC,kBAAC,IAAD,CAAOS,KAAM,WAAYE,UAAWT,IACpC,kBAAC,IAAD,CAAOO,KAAM,gBAAiBE,UAAWN,U,GAPzBF,IAAMC,WCMZQ,QACW,cAA7Bd,OAAOe,SAASC,UAEe,UAA7BhB,OAAOe,SAASC,UAEhBhB,OAAOe,SAASC,SAASC,MACvB,2D,OCXNC,IAAUC,OAAO1B,SAAS2B,MAC1BC,IAASC,OAAO,kBAAC,EAAD,MAAiB7B,SAAS8B,eAAe,SDmInD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.2cb8dd32.chunk.js","sourcesContent":["const baseSize = 32\r\n// 设置 rem 函数\r\nfunction setRem () {\r\n  // 当前页面宽度相对于 750 宽的缩放比例，可根据自己需要修改。\r\n  const scale = document.documentElement.clientWidth / 750\r\n  // 设置页面根节点字体大小\r\n  document.documentElement.style.fontSize = (baseSize * Math.min(scale, 2)) + 'px'\r\n}\r\n// 初始化\r\nsetRem()\r\n// 改变窗口大小时重新设置 rem\r\nwindow.onresize = function () {\r\n  setRem()\r\n}\r\n","import React from 'react'\r\nimport './index.scss'\r\nconst Introduction = () => {\r\n  return (\r\n    <div className={'test'}>介绍</div>\r\n  )\r\n}\r\n// class Introduction extends React.Component<any, any> {\r\n//   render() {\r\n//     return (\r\n//       <div className={'test'}>介绍</div>\r\n//     )\r\n//   }\r\n// }\r\nexport default Introduction\r\n","import React from 'react'\r\nimport { Button } from 'antd-mobile'\r\nclass Lottery extends React.Component<any, any> {\r\n  render () {\r\n    return (\r\n      <div>\r\n        抽奖\r\n        <Button>测试</Button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default Lottery\r\n","import React, { useState, MouseEventHandler } from 'react'\r\ninterface IProps {\r\n  onClick: MouseEventHandler<HTMLDivElement>\r\n}\r\nfunction ReceiveAward() {\r\n  const [count, setCount] = useState(0)\r\n  return (\r\n    <div>\r\n      {count}\r\n      {/*<div onClick={setCount(count + 1)}>*/}\r\n      {/*  +1*/}\r\n      {/*</div>*/}\r\n    </div>\r\n  )\r\n}\r\nexport default ReceiveAward\r\n","import React from'react'\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\r\nimport Introduction from '../view/introduction'\r\nimport Lottery from '../view/lottery'\r\nimport ReceiveAward from '../view/receveive-award'\r\n\r\nclass IndexRouter extends React.Component<any, any> {\r\n  render () {\r\n    return (\r\n      <Router>\r\n        <Switch>\r\n          <Route path={'/'} exact component={Introduction} />\r\n          <Route path={'/lottery'} component={Lottery} />\r\n          <Route path={'/receiveAward'} component={ReceiveAward}></Route>\r\n        </Switch>\r\n      </Router>\r\n    )\r\n  }\r\n}\r\nexport default IndexRouter\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport FastClick from 'fastclick'\nimport './resource/style/index.scss';\nimport IndexRouter from './router'\nimport * as serviceWorker from './serviceWorker';\nimport './js/rem'\nFastClick.attach(document.body)\nReactDOM.render(<IndexRouter />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}